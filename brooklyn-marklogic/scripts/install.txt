function waitForMarkLogicUp(){
  sleep 30
  #for i in {1..60}
  #do
  #   if [ "curl --silent http://localhost:8001" ];
  #   then
  #      return
  #   else
  #      echo Waiting for MarkLogic to be started
  #      sleep 1
  #   fi
  #done
  #echo "The MarkLogic was not up in 60 seconds"
  #exit 1
}

echo ==============================================================================
<#if driver.isMaster()>
echo  INSTALLING MARKLOGIC MASTER
<#else>
echo  INSTALLING MARKLOGIC SLAVE
</#if>
echo ==============================================================================

# A temporary workaround to change the hostname of the rackspace machine. The hostname used in rackspace is not usable
# inside the marklogic environment and also can't be used to connect to since it isn't registered in a dns server.
# so in case of Rackspace, the hostname seen in brooklyn will be the public ip address, and we are going to set this
# public ip address as the hostname on that machine. In ec2 there won't be any change, since the hostname we see in
# brooklyn, will be the same as the hostname used on that machine.
sudo hostname ${driver.hostname}
echo hostname after
hostname

echo Installing MarkLogic rpm
sudo yum -y --nogpgcheck install lsb gdb unzip

(sudo yum -y --nogpgcheck install libc.so.6 ) || true

if [ -f ~/${driver.downloadFilename} ];
then
    echo ~/${driver.downloadFilename} already downloaded.
else
    echo Downloading ${driver.downloadFilename}
    curl -o  ~/${driver.downloadFilename} -L -O --user ${driver.websiteUsername}:${driver.websitePassword} http://www.marklogic.com/download/${driver.downloadFilename}
fi

sudo -E -n -S -- rpm -i ~/${driver.downloadFilename}
echo Finished Installing the MarkLogic rpm

sudo -E -n -S -- sed -i 's/MARKLOGIC_EC2_HOST=1/MARKLOGIC_EC2_HOST=0/' /etc/sysconfig/MarkLogic

pushd .

mkdir -p ~/marklogic_install/
unzip -u  -d ~ ~/marklogic_install.zip
cd ~/marklogic_install
echo Copying xqy files
sudo -E -n -S -- cp join-cluster.xqy \
                     qa-restart.xqy \
                     transfer-cluster-config.xqy \
                     /opt/MarkLogic/Admin

sudo -E -n -S -- mkdir -p /var/opt/xqy

sudo -E -n -S -- cp xqy/bookmark.xqy \
                    xqy/delete.xqy \
                    xqy/search-debug.xqy \
                    xqy/search.xqy \
                    xqy/update.xqy \
                    xqy/verify.xqy \
                    xqy/view.xqy \
                    /var/opt/xqy

sudo -E -n -S -- cp get_db_id.xqy \
                    stats.xqy \
                    http-server-status.xqy \
                    get-hosts.xqy \
                    attach_replica.xqy \
                    detach_replica.xqy \
                    create_markmail_forests.xqy \
                    create_forests.xqy \
                    create_forests_with_fastdir.xqy \
                    create_s3_forests.xqy \
                    create_s3_forests_with_fastdir.xqy \
                    create_s3_replica_forests.xqy \
                    create_s3_replica_forests_with_fastdir.xqy \
                    create_replica_forests.xqy \
                    create_replica_forests_with_fastdir.xqy \
                    create_markmail_appserver.xqy \
                    create_markmail_database.xqy \
                    attach_markmail_forests.xqy \
                    create_httpserver.xqy \
                    create_role.xqy \
                    rewrite-hostname.xqy \
                    rewrite-assignments.xqy \
                    transfer-cluster-config.xqy \
                    set_metering_on.xqy \
                    /opt/MarkLogic/Admin
echo Finished copying xqy files

popd

echo Starting MarkLogic
sudo -E -n -S -- /etc/init.d/MarkLogic start
waitForMarkLogicUp
echo Finished Starting MarkLogic

echo Installing new license
curl  'http://localhost:8001/license-go.xqy?license-key=${driver.licenseKey}&licensee=${driver.licensee}&ok'
sleep 2
echo Finished installing new license

echo Accepting agreement
curl 'http://localhost:8001/agree-go.xqy?accepted-agreement=development'
sleep 2
echo Finished accepting agreement

echo initialize-go.xqy
curl 'http://localhost:8001/initialize-go.xqy'
sleep 2

echo Restarting MarkLogic
curl 'http://localhost:8001/qa-restart.xqy'
waitForMarkLogicUp
echo Finished restarting MarkLogic

<#if driver.isMaster()>
echo  INSTALLING MARKLOGIC MASTER

echo Setting new credentials
curl 'http://localhost:8001/security-install-go.xqy?auto=true&user=${driver.user}&password1=${driver.password}&password2=${driver.password}&realm=public'
sleep 2
echo Finished setting new credentials

echo credentials-admin-go # only needed for S3
#curl --digest -u ${driver.user}:${driver.password} \
#   'http://localhost:8001/credentials-admin-go.xqy?/sec:credentials/sec:aws-access-key=${driver.awsAccessKey}&/sec:credentials/sec:aws-secret-key=${driver.awsSecretKey}'
#sleep 2

echo Restarting MarkLogic
curl --digest -u ${driver.user}:${driver.password} 'http://localhost:8001/qa-restart.xqy'
waitForMarkLogicUp
echo Finished restarting MarkLogic

# todo
# set up the groups.

#echo Creating Markmail database
#curl --digest -u ${driver.user}:${driver.password} http://localhost:8001/create_markmail_database.xqy
#echo Finished creating MarkMail database

#echo Creating MarkMail forrest
#curl --digest -u ${driver.user}:${driver.password} 'http://localhost:8001/create_markmail_forests.xqy?datadir=/var/opt/mldata&fcount=4&host=${driver.hostname}&node=node1&cluster=${driver.cluster}'
#echo Finished creating MarkMail forrest

#echo Attaching MarkMail forrest
#curl --digest -u ${driver.user}:${driver.password} 'http://localhost:8001/attach_markmail_forests.xqy?fcount=${driver.fcount}&host=${driver.hostname}&node=node1&cluster=${driver.cluster}'
#echo Finished attaching MarkMail forrest

#echo Creating role
#curl --digest -u ${driver.user}:${driver.password} 'http://localhost:8001/create_role.xqy'
#echo Finished creating role

#echo Creating MarkMail appserver
#curl --digest -u ${driver.user}:${driver.password} 'http://localhost:8001/create_markmail_appserver.xqy'
#echo Finished creating MarkMail appserver

#echo Setting metering on
#curl --digest -u ${driver.user}:${driver.password} 'http://localhost:8001/set_metering_on.xqy'
#echo Finished setting metering on

<#else>

#curl http://localhost:8001/

#echo Restarting MarkLogic
#curl --digest -u ${driver.user}:${driver.password} 'http://localhost:8001/qa-restart.xqy'
#waitForMarkLogicUp
#echo Finished restarting MarkLogic

#echo Setting new credentials
#curl "http://localhost:8001/security-install-go.xqy" \
#    -H "Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8" \
#    -H "Content-Type: application/x-www-form-urlencoded" \
#    --data "user=${driver.user}&password1=${driver.password}&password2=${driver.password}&realm=public&ok.x=32&ok.y=19&ok=ok"
#
#curl 'http://localhost:8001/security-install-go.xqy?auto=true&user=${driver.user}&password1=${driver.password}&password2=${driver.password}&realm=public'
#sleep 2
#echo Finished setting new credentials


echo Joining cluster
hostname
curl --digest -u ${driver.user}:${driver.password} 'http://localhost:8001/join-cluster.xqy?server=${driver.masterAddress}&joiner=${driver.hostname}&user=${driver.user}&pass=${driver.password}'
echo Finished joining cluster

echo Transferring Cluster Config
curl --digest -u ${driver.user}:${driver.password} \
   'http://${driver.masterAddress}:8001/transfer-cluster-config.xqy?server=${driver.masterAddress}&joiner=${driver.hostname}'
echo Finished transferring Cluster config

echo Restarting MarkLogic
curl --digest -u ${driver.user}:${driver.password} 'http://localhost:8001/qa-restart.xqy'
waitForMarkLogicUp
echo Finished restarting MarkLogic

</#if>

# todo: now we need to assign the node to a group

echo ==============================================================================
<#if driver.isMaster()>
echo  FINISHED INSTALLING MARKLOGIC MASTER!!
<#else>
echo  FINISHED INSTALLING MARKLOGIC SLAVE!!
</#if>
echo ==============================================================================

